

Before Answer question:
// 1. Clarify the requirements
// 2. Algorithm or OOD or System Design?
// 3. given a viable result first. Then optimize

5 principal: S O L I D

// 1. Single responsibility principle
        One Class should only have one propose.

// 2. Open close principle
        Open to extension, close to modification

// 3. Liskov substitution principle
        any object of a superclass should always be substitutable by an object of a subclass

// 4. Interface segregation principle
       不能强迫一个class实现interface里它用不上的method

// 5. Dependency inversion principle

// solution:
1. Clarify :
    Eliminate ambiguous terms
2. Core Objects :
    Class that needs to be created
3. Cases :
    Features and methods that needs to be implemented
4. Classes :
    Fill the class
5. Correctness


// Design a Elevator system for building:
    1. clarify:
    What:
    Attributes of elevator:
            max weight
            max number of people
            Passenger elevator/Goods elevator
    Attributes of building:
            number of doors for each floor
            number of elevator that can response request
    How:
    elevator response logic:
            same direction >  stand > reverse direction
            button that can response (while going up, can you press lower floor)
    Who:
    depending on human or system:
            example: how to get the total weight of all passenger: sensor or sum weight of list of passenger class)

    2. Core Object   -: private  +: public  #: protected  <<>>:enum
        Request ------> ElevatorSystem -------------------->Elevator
                   [- List<Elevator> elevators]     [- List<ElevatorButton> buttons]
                                                                |
                                                                |
                                                         ElevatorButton
